import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class DataProcessing {

    public static void main(String[] args) {
        String filePath = "E:\\housepricing.csv";
        List<String[]> data = readCSV(filePath);
        int categoricalColumnIndex = 2;
        List<String[]> oneHotEncodedData = oneHotEncode(data, categoricalColumnIndex);
        List<String[]> normalizedData = normalizeData(data);
        List<String[]> standardizedData = standardizeData(data);
        printData("Original Data", data);
        printData("One-Hot Encoded Data", oneHotEncodedData);
        printData("Normalized Data", normalizedData);
        printData("Standardized Data", standardizedData);
    }

    private static List<String[]> readCSV(String filePath) {
        List<String[]> data = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            data = reader.lines().map(line -> line.split(",")).collect(Collectors.toList());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return data;
    }

    private static List<String[]> oneHotEncode(List<String[]> data, int categoricalColumnIndex) {
        List<String[]> oneHotEncodedData = new ArrayList<>();
        List<String> categories = data.stream().map(row -> row[categoricalColumnIndex]).distinct().collect(Collectors.toList());
        for (String[] row : data) {
            List<String> encodedRow = new ArrayList<>(Arrays.asList(row));
            for (String category : categories) {
                encodedRow.add(row[categoricalColumnIndex].equals(category) ? "1" : "0");
            }
            oneHotEncodedData.add(encodedRow.toArray(new String[0]));
        }
        return oneHotEncodedData;
    }

    private static List<String[]> normalizeData(List<String[]> data) {
        List<String[]> normalizedData = new ArrayList<>();
        for (String[] row : data) {
            double sum = 0;
            for (int i = 0; i < row.length; i++) {
                if (i != 0 && row[i].matches("-?\\d+(\\.\\d+)?")) { // Check if it's a numeric value
                    sum += Double.parseDouble(row[i]);
                }
            }
            String[] normalizedRow = new String[row.length];
            normalizedRow[0] = row[0];
            for (int i = 1; i < row.length; i++) {
                if (row[i].matches("-?\\d+(\\.\\d+)?")) { // Check if it's a numeric value
                    normalizedRow[i] = String.valueOf(Double.parseDouble(row[i]) / sum);
                } else {
                    normalizedRow[i] = row[i];
                }
            }
            normalizedData.add(normalizedRow);
        }
        return normalizedData;
    }

    private static List<String[]> standardizeData(List<String[]> data) {
        List<String[]> standardizedData = new ArrayList<>();
        double mean = getMeanValue(data);
        double stdDev = getStandardDeviation(data);
        for (String[] row : data) {
            List<String> standardizedRow = new ArrayList<>();
            for (String value : row) {
                if (value.matches("-?\\d+(\\.\\d+)?")) { // Check if it's a numeric value
                    double doubleValue = Double.parseDouble(value.equals("") ? "0" : value);
                    double standardizedValue = (doubleValue - mean) / stdDev;
                    standardizedRow.add(String.format("%.2f", standardizedValue));
                } else {
                    standardizedRow.add(value);
                }
            }
            standardizedData.add(standardizedRow.toArray(new String[0]));
        }
        return standardizedData;
    }

    private static void printData(String title, List<String[]> data) {
        System.out.println(title);
        for (String[] row : data) {
            System.out.println(Arrays.toString(row));
        }
        System.out.println();
    }

    private static double getMeanValue(List<String[]> data) {
        return data.stream().skip(1) // Skip headers
                .flatMap(Arrays::stream)
                .filter(value -> value.matches("-?\\d+(\\.\\d+)?")) // Filter numeric values
                .mapToDouble(Double::parseDouble)
                .average()
                .orElse(0);
    }

    private static double getStandardDeviation(List<String[]> data) {
        double mean = getMeanValue(data);
        double sum = data.stream().skip(1) // Skip headers
                .flatMap(Arrays::stream)
                .filter(value -> value.matches("-?\\d+(\\.\\d+)?")) // Filter numeric values
                .mapToDouble(value -> {
                    double numericValue = Double.parseDouble(value);
                    return Math.pow(numericValue - mean, 2);
                })
                .sum();
        return Math.sqrt(sum / ((data.size() - 1) * data.get(0).length));
    }
}
